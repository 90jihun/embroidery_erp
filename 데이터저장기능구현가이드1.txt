// 데이터 저장 기능 구현 가이드

// 1. 폴더 구조 설정
/*
project-root/
├── frontend/
│   ├── src/
│   │   ├── components/
│   │   │   ├── orders/
│   │   │   │   ├── OrderForm.jsx (작업지시서 등록 폼)
│   │   │   │   └── OrderList.jsx (작업지시서 목록)
│   │   ├── pages/
│   │   │   └── OrdersPage.jsx (작업지시서 페이지)
│   │   ├── services/
│   │   │   └── OrderService.js (API 통신 서비스)
│   │   ├── App.tsx
│   │   └── Routes.tsx
│   └── public/
├── backend/
│   ├── controllers/
│   │   └── OrderController.js (작업지시서 컨트롤러)
│   ├── models/
│   │   └── Order.js (작업지시서 모델)
│   ├── routes/
│   │   └── orderRoutes.js (API 라우트)
│   ├── uploads/ (이미지 저장 폴더)
│   └── server.js (Express 서버)
└── package.json
*/

// 2. 구현 단계
// 2.1 백엔드 구현
// - MongoDB 설치 및 연결 (또는 MongoDB Atlas 사용)
// - 필요한 패키지 설치: express, mongoose, cors, multer, dotenv
//   npm install express mongoose cors multer dotenv

// - .env 파일 생성
/*
MONGO_URI=mongodb://localhost:27017/embroidery_erp
PORT=3001
*/

// - 백엔드 서버 실행
//   node server.js 또는 nodemon server.js


// 2.2 프론트엔드 구현
// - 필요한 패키지 설치 확인
//   @chakra-ui/react, react-router-dom

// - .env 파일 생성
/*
REACT_APP_API_URL=http://localhost:3001/api
*/

// - 프론트엔드 서버 실행
//   npm start


// 3. OrderForm.jsx와 OrderService.js 통합
// - 프론트엔드에 제공된 OrderForm.jsx와 OrderService.js 파일 추가
// - 백엔드 API와 통신 확인

// 4. 백엔드 구현
// - 제공된 OrderController.js, Order.js, orderRoutes.js 파일 추가
// - server.js에 라우터 등록

// 5. 테스트
// - 작업지시서 등록 기능 테스트
// - 이미지 업로드 기능 테스트
// - 에러 처리 테스트

// 6. 문제 해결 팁
// - 프록시 설정: 개발 중 CORS 문제 해결을 위해 package.json에 프록시 설정 추가
//   "proxy": "http://localhost:3001"

// - 이미지 업로드 크기 제한 문제 해결: 
//   서버 측에서 body-parser 또는 express.json() 설정에서 limit 옵션 조정

// - MongoDB 연결 문제:
//   환경 변수 설정 확인, MongoDB 서비스 실행 확인

// - API 요청 오류:
//   브라우저 개발자 도구 네트워크 탭에서 요청/응답 확인
//   서버 콘솔 로그 확인

// 7. 프로덕션 배포 준비
// - 프론트엔드 빌드: npm run build
// - 백엔드 서버에서 정적 파일 제공 설정
// - 환경 변수 프로덕션 값으로 설정
// - 보안 설정: helmet 미들웨어 추가, rate limiting 적용 등